

Time Complexity: O(N log N)

Auxiliary Space: O(1)


#include<bits/stdc++.h>
using namespace std;


void heapify(int arr[],int n,int i)
{
    int curr=i;
    int left=2*i;
    int right=2*i+1;

    if(left<n and arr[curr]<arr[left])
    {
        curr=left;
    }

    if(right<n and arr[curr]<arr[right])
    {

        curr=right;
    }


    if(curr!=i)
    {

        swap(arr[curr],arr[i]);

        heapify(arr,n,curr);
    }
}


void heapsort(int arr[],int n)
{
    int start_index=(n/2)-1;

    // converting the entire array into max-heap

    for(int i=start_index;i>=0;i--)
    {
        heapify(arr,n,i);
    }


    for(int i=n-1;i>=1;i--)
    {
        swap(arr[0],arr[i]);

        heapify(arr,i,0);
    }



}


int main()
{

    int arr[7]={1,4,3,1,5,7,9};

    int n=sizeof(arr)/sizeof(int);

    heapsort(arr,n);

    for(int i=0;i<n;i++)
    {

        cout<<arr[i]<<" ";
    }

    cout<<endl;


    return 0;
}
